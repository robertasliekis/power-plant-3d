{"version":3,"sources":["actions/index.js","data/textData.js","components/IntroWindow.js","functions/LoadPlantModel.js","components/PowerPlantModel.js","components/FloorsScene.js","data/buildingsData.js","components/InfoWindow.js","hooks/useMousePosition.js","App.js","serviceWorker.js","reducers/setClickedFloor.js","reducers/setClickedRoom.js","reducers/setWindowWidth.js","reducers/setLanguage.js","reducers/setHoveredBuilding.js","reducers/setIntroWindowVisisble.js","reducers/allReducers.js","index.js"],"names":["setClickedFloor","index","type","payload","textData","mapDispatchToProps","setLanguage","language","setIntroWindowVisisble","connect","state","introWindowVisible","useState","showWelcomeWindow","setShowWelcomeWindow","className","style","display","onClick","setTimeout","backgroundImage","LoadPlantModel","nodes","useLoader","GLTFLoader","activeBuildings","forEach","number","geometry","push","groundMesh","ground_1","roadMesh","road_1","buildingsMesh","extra_buildings_1","windowsMesh","windows_1","chimneyMeshes","chimneyMesh01","chimney_1_1","chimneyMesh02","chimney_2_1","chimneyMesh03","chimney_3_1","pipesGreyMesh","pipes_grey_1","pipesYellowMesh","pipes_yellow_1","pipesSupportMesh","pipe_support_1","FloorsModel","windowWidth","clickedFloor","onClickedFloorChange","clickedRoom","onHoveredBuilgingChange","onClickedRoomChange","pipesMeshes","buildingsTexture","THREE","wrapS","wrapT","repeat","set","groundTexture","buildingRef","useRef","floorRefs","materialRefs","roomRefs","sideRefs","useFrame","setMeshOpacity","opacity","current","roomRef","setMeshPosition","meshRef","floorIndex","indexDifference","floorGap","undefined","floorPosition","position","y","animationSpeed","ref","meshOpacity","hoveredFloor","setHoveredFloor","hoveredOnFloor","mouseInside","rotation","x","z","degrees","map","degree","Math","PI","convertDegreesToRadians","building","buildingIndex","key","dispose","onPointerOver","e","stopPropagation","onPointerOut","intersections","length","attach","transparent","color","extend","OrbitControls","softShadows","CameraControls","useThree","camera","domElement","gl","controls","update","args","minDistance","maxDistance","minPolarAngle","maxPolarAngle","setClickedRoom","setHoveredBuilding","setWindowWidth","colorManagement","shadowMap","fov","intensity","fallback","PowerPlantModel","buildingsData","name","description","tourLink","hoveredBuilding","buildingText","setBuildingText","showInfoWindow","setShowInfoWindow","mousePosition","setPosition","useEffect","setFromEvent","clientX","clientY","window","addEventListener","removeEventListener","useMousePosition","pointerEvents","transform","href","width","handleResize","innerWidth","_","Boolean","location","hostname","match","initialState","action","clickCount","newLanguage","combineReducers","store","createStore","reducers","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAAaA,EAAkB,SAACC,GAC9B,MAAO,CACLC,KAAM,oBACNC,QAASF,ICWEG,EAdE,CACf,CAAC,kDAAyC,oCAC1C,CAAC,oPAAD,oJAIA,CAAC,gCAA4B,0BAC7B,CAAC,sCAAwB,sBACzB,CACE,qlBACA,seCwDJ,IAOMC,EAAqB,CACzBC,YFrDyB,SAACC,GAC1B,MAAO,CACLL,KAAM,eACNC,QAASI,IEmDXC,uBFxCoC,WACpC,MAAO,CACLN,KAAM,8BEyCKO,eAZS,SAACC,GACvB,MAAO,CACLH,SAAUG,EAAMJ,YAAYC,SAC5BI,mBAAoBD,EAAMF,uBAAuBG,sBASbN,EAAzBI,EAzEf,YAKI,IAJFF,EAIC,EAJDA,SACAD,EAGC,EAHDA,YACAK,EAEC,EAFDA,mBACAH,EACC,EADDA,uBACC,EACiDI,oBAAS,GAD1D,mBACMC,EADN,KACyBC,EADzB,KAGD,OACE,yBACEC,UAAU,yBACVC,MAAO,CAAEC,QAASN,EAAqB,OAAS,SAEhD,yBACEI,UAAU,oBACVC,MAAO,CAAEC,QAASJ,EAAoB,OAAS,SAE/C,yBAAKE,UAAU,kBACb,4BAAKX,EAAS,GAAGG,IACjB,2BAAIH,EAAS,GAAGG,IAChB,yBACEQ,UAAU,gBACVG,QAAS,WACPJ,GAAqB,GACrBK,YAAW,WACTX,MACC,OAELQ,MAAO,CACLI,gBACe,IAAbb,EAAA,kEAOR,yBACEQ,UAAU,mBACVG,QAAS,WACPZ,KAEFU,MAAO,CACLI,gBACe,IAAbb,EAAA,kEAMR,yBACEQ,UAAU,iBACVC,MAAO,CAAEC,QAASJ,EAAoB,OAAS,SAE/C,yBAAKE,UAAU,iBACf,2BAAIX,EAAS,GAAGG,S,sCCZTc,MA7Cf,WAA2B,IACjBC,EAAUC,YAAUC,IAAY,uBAAhCF,MAEFG,EAAkB,GACA,CAAC,EAAG,EAAG,EAAG,EAAG,GAIrBC,SAAQ,SAACC,EAAQ1B,GAC/BwB,EAAgBxB,GAASqB,EAAM,iBAAD,OAAkBK,EAAlB,OAA8BC,YAHvC,CAAC,EAAG,EAAG,GAMfF,SAAQ,SAACC,GACtBF,EAAgBI,KAAKP,EAAM,kBAAD,OAAmBK,EAAnB,OAA+BC,aAG3D,IAAME,EAAaR,EAAMS,SAASH,SAC5BI,EAAWV,EAAMW,OAAOL,SACxBM,EAAgBZ,EAAMa,kBAAkBP,SAExCQ,EAAcd,EAAMe,UAAUT,SAK9BU,EAAgB,CAAEC,cAHFjB,EAAMkB,YAAYZ,SAGDa,cAFjBnB,EAAMoB,YAAYd,SAEce,cADhCrB,EAAMsB,YAAYhB,UAGlCiB,EAAgBvB,EAAMwB,aAAalB,SACnCmB,EAAkBzB,EAAM0B,eAAepB,SACvCqB,EAAmB3B,EAAM4B,eAAetB,SAK9C,MAAO,CACLE,EACAE,EACAE,EACAI,EACAb,EATkB,CAAEoB,gBAAeE,kBAAiBE,oBAWpDb,ICqMWe,EA1OK,SAAC,GAOf,EANJC,YAMK,IALLC,EAKI,EALJA,aAEAC,GAGI,EAJJC,YAII,EAHJD,sBAEAE,GACI,EAFJC,oBAEI,EADJD,yBACI,EASAnC,IATA,mBAEFS,EAFE,KAGFE,EAHE,KAIFE,EAJE,KAKFI,EALE,KAMFb,EANE,KAOFiC,EAPE,KAQFtB,EARE,KAWJf,IAIA,IAAMsC,EAAmBpC,YACvBqC,gBACA,0CAEFD,EAAiBE,MAAQD,iBACzBD,EAAiBG,MAAQF,iBACzBD,EAAiBI,OAAOC,IAAI,EAAG,GAE/B,IAAMC,EAAgB1C,YACpBqC,gBACA,kCAEFK,EAAcJ,MAAQD,iBACtBK,EAAcH,MAAQF,iBACtBK,EAAcF,OAAOC,IAAI,EAAG,GAE5B,IAAME,EAAcC,mBACdC,EAAYD,iBAAO,IACnBE,EAAeF,iBAAO,IACtBG,EAAWH,iBAAO,CAAC,GAAI,GAAI,GAAI,GAAI,KACnCI,EAAWJ,iBAAO,IAGxBK,aAAS,WACP,IAAMC,EAAiB,SAACC,EAASzE,GAC/BoE,EAAaM,QAAQ1E,GAAOyE,QAAUA,EACtCH,EAASI,QAAQ1E,GAAOyE,QAAUA,EAClCJ,EAASK,QAAQ1E,GAAOyB,SAAQ,SAACkD,GAC/BA,EAAQF,QAAUA,MAIhBG,EAAkB,SAACC,EAASC,EAAYC,GAC5C,IAAIC,EAAW,OACSC,IAApBF,IACFC,EAA6B,GAAlBD,GAEb,IAAIG,EAhBc,GAgBEJ,EAA6BE,EAE7CH,EAAQM,SAASC,EAAIF,GACnBH,EAAkB,QAAyBE,IAApBF,KACzBF,EAAQM,SAASC,GAAKC,GAEfR,EAAQM,SAASC,EAAIF,IAC1BH,EAAkB,QAAyBE,IAApBF,KACzBF,EAAQM,SAASC,GAAKC,IAKtBA,EAAiB,EAEvBlB,EAAUO,QAAQjD,SAAQ,SAAC6D,EAAKtF,GAC9B,IAAIuF,EAAc,EAClB,GAAqB,OAAjBnC,EAAuB,CACzB,IAAI2B,EAAkB3B,EAAepD,EACrCuF,EAAc,GACVnC,IAAiBpD,GACnBwE,EAAee,EAAavF,GAE9B4E,EAAgBU,EAAKtF,EAAO+E,QAE5BP,EAAee,EAAavF,GAC5B4E,EAAgBU,EAAKtF,SA9EvB,MAmFoCW,mBAAS,MAnF7C,mBAmFG6E,EAnFH,KAmFiBC,EAnFjB,OAoFkC9E,mBAAS,MApF3C,mBAsFE+E,GAtFF,UAsFmB,SAAC1F,EAAO2F,GAWzBA,GACFF,EAAgBzF,GAChBuD,EAAwBvD,IACfwF,IAAiBxF,IAC1ByF,EAAgB,MAChBlC,EAAwB,SAkC5B,OACE,2BACE+B,IAAKrB,EACLkB,SAAU,CAAC,EAAG,EAAG,GACjBS,SAT4B,SAACC,EAAGT,EAAGU,GACrC,IAAIC,EAAU,CAACF,EAAGT,EAAGU,GACrB,OAAkBC,EAAQC,KAAI,SAACC,GAAD,OAAYA,GAAUC,KAAKC,GAAK,QAOlDC,EAAyB,GAAI,EAAG,IAEzC5E,EAAgBwE,KAAI,SAACK,EAAUC,GAAX,OACnB,0BACE3E,SAAU0E,EACVE,IAAKD,EACLE,QAAS,KACTC,cAAe,SAACC,GACdA,EAAEC,kBACFjB,EAAeY,GAAe,IAEhCM,aAAc,SAACF,GACbA,EAAEG,cAAcC,QAAUpB,EAAeY,GAAe,IAE1DrF,QAAS,SAACyF,GACRA,EAAEC,kBAhDVtD,EAiDuBiD,KAGjB,0CACES,OAAO,WACPC,aAAa,EACbhB,IAAKtC,EACLuD,MAAOzB,IAAiBc,EAAgB,UAAY,cAI1D,0BAAM3E,SAAUQ,GACd,0CACE4E,OAAO,WACPC,aAAa,EACbC,MAAO,QACPjB,IAAKtC,KAGT,0BAAM/B,SAAUE,GACd,0CACEkF,OAAO,WACPC,aAAa,EACbhB,IAAKhC,EACLiD,MAAO,WAGX,0BAAMtF,SAAUI,GACd,0CACEgF,OAAO,WACPC,aAAa,EACbC,MAAO,aAGX,0BAAMtF,SAAUM,GACd,0CACE8E,OAAO,WACPC,aAAa,EACbC,MAAO,WAGX,0BAAMtF,SAAUU,EAAcC,eAC5B,0CACEyE,OAAO,WACPE,MAAO,QACPjB,IAAKtC,KAGT,0BAAM/B,SAAUU,EAAcG,eAC5B,0CAAsBuE,OAAO,WAAWE,MAAO,WAEjD,0BAAMtF,SAAUU,EAAcK,eAC5B,0CACEqE,OAAO,WACPE,MAAO,QACPjB,IAAKtC,KAGT,0BAAM/B,SAAU8B,EAAYb,eAC1B,0CAAsBmE,OAAO,WAAWE,MAAO,aAEjD,0BAAMtF,SAAU8B,EAAYX,iBAC1B,0CAAsBiE,OAAO,WAAWE,MAAO,aAEjD,0BAAMtF,SAAU8B,EAAYT,kBAC1B,0CAAsB+D,OAAO,WAAWE,MAAO,eC/NvDC,YAAO,CAAEC,oBACTC,cAEA,IAAMC,EAAiB,SAAC,GAAoB,EAAlBlE,YAAmB,IAAD,EAItCmE,cAFFC,EAFwC,EAExCA,OACMC,EAHkC,EAGxCC,GAAMD,WAEFE,EAAWxD,mBACjBK,aAAS,SAAC9D,GAAD,OAAWiH,EAAShD,QAAQiD,YAOrC,OACE,mCACErC,IAAKoC,EACLE,KAAM,CAACL,EAAQC,GACfK,YAVc,GAWdC,YAVc,IAWdC,cAAe,IACfC,cAAe,OAoDrB,IAQM5H,EAAqB,CACzBL,kBACAkI,eL1F4B,SAACjI,GAC7B,MAAO,CACLC,KAAM,mBACNC,QAASF,IKwFXkI,mBLtEgC,SAAClI,GACjC,MAAO,CACLC,KAAM,uBACNC,QAASF,KKsEEQ,eAdS,SAACC,GACvB,MAAO,CACL2C,aAAc3C,EAAMV,gBAAgBqD,aACpCE,YAAa7C,EAAMwH,eAAe3E,YAClCH,YAAa1C,EAAM0H,eAAehF,eAUE/C,EAAzBI,EA7Df,YAOI,IANF2C,EAMC,EANDA,YACAC,EAKC,EALDA,aACAE,EAIC,EAJDA,YACAvD,EAGC,EAHDA,gBACAkI,EAEC,EAFDA,eACAC,EACC,EADDA,mBAcA,OACE,yBAAKpH,UAAU,yBACb,kBAAC,IAAD,CACEsH,iBAAe,EACfC,WAAS,EACTd,OAAQ,CAAEpC,SAAU,CAAC,IAAK,IAAK,KAAMmD,IAAK,KAE1C,kBAAC,EAAD,CAAgBnF,YAAaA,IAC7B,kCAAcoF,UAAW,KACzB,gCAAYpD,SAAU,EAAE,GAAI,KAAM,IAAKoD,UAAW,KAClD,+BACE,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAACC,EAAD,CACEpF,qBAzBe,SAACrD,GAC1BD,EAAgBC,IAyBNwD,oBAtBc,SAACxD,GACzBiI,EAAejI,IAsBLuD,wBAnBkB,SAACvD,GAC7BkI,EAAmBlI,IAmBToD,aAAcA,EACdE,YAAaA,EACbH,YAAaA,WCXZuF,EAnEO,CACpB,CACEC,KAAM,CACJ,4CACA,oCAEFC,YAAa,CACX,4GACA,6FAEFC,SAAU,4BAEZ,CACEF,KAAM,CAAC,0CAAiC,iBACxCC,YAAa,CACX,4GACA,6FAEFC,SAAU,4BAEZ,CACEF,KAAM,CAAC,oBAAgB,WACvBC,YAAa,CACX,4GACA,6FAEFC,SAAU,4BAEZ,CACEF,KAAM,CAAC,+BAA2B,4BAClCC,YAAa,CACX,4GACA,6FAEFC,SAAU,4BAEZ,CACEF,KAAM,CAAC,qBAAY,UACnBC,YAAa,CACX,4GACA,6FAEFC,SAAU,4BAEZ,CACEF,KAAM,CAAC,gBAAiB,cACxBC,YAAa,CACX,4GACA,8FAGJ,CACED,KAAM,CAAC,gBAAiB,cACxBC,YAAa,CACX,4GACA,8FAGJ,CACED,KAAM,CAAC,gBAAiB,cACxBC,YAAa,CACX,4GACA,+FCmCN,IASMxI,EAAqB,CACzBL,mBAGaS,eAbS,SAACC,GACvB,MAAO,CACL2C,aAAc3C,EAAMV,gBAAgBqD,aACpC9C,SAAUG,EAAMJ,YAAYC,SAC5BwI,gBAAiBrI,EAAMyH,mBAAmBY,gBAC1CpI,mBAAoBD,EAAMF,uBAAuBG,sBAQbN,EAAzBI,EApGf,YAMI,IALF4C,EAKC,EALDA,aACA9C,EAIC,EAJDA,SACAwI,EAGC,EAHDA,gBACApI,EAEC,EAFDA,mBACAX,EACC,EADDA,gBACC,EACuCY,mBAAS,IADhD,mBACMoI,EADN,KACoBC,EADpB,OAE2CrI,oBAAS,GAFpD,mBAEMsI,EAFN,KAEsBC,EAFtB,KAIKC,EClBwB,WAAO,IAAD,EACJxI,mBAAS,CAAEkF,EAAG,EAAGT,EAAG,IADhB,mBAC7BD,EAD6B,KACnBiE,EADmB,KAYpC,OATAC,qBAAU,WACR,IAAMC,EAAe,SAAC5C,GAAD,OAAO0C,EAAY,CAAEvD,EAAGa,EAAE6C,QAASnE,EAAGsB,EAAE8C,WAG7D,OAFAC,OAAOC,iBAAiB,YAAaJ,GAE9B,WACLG,OAAOE,oBAAoB,YAAaL,MAEzC,IAEInE,EDMeyE,GAStB,OAPAP,qBAAU,WACa,OAAjBjG,IACF4F,EAAgBN,EAActF,IAC9B8F,GAAkB,MAEnB,CAAC9F,IAGF,yBAAKtC,UAAU,kBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,SACf,yBACEA,UAAU,eACVG,QAAS,WACPiI,GAAkB,GAClBnJ,EAAgB,OAElBgB,MAAO,CACL0D,QAAS/D,EAAqB,IAAM,IACpCmJ,cAAenJ,EAAqB,OAAS,WAI9B,OAApBoI,EACC,yBACEhI,UAAU,qBACVC,MAAO,CACL+I,UAAU,2BAAD,OAA6BX,EAActD,EAAI,GAA/C,eACPsD,EAAc/D,EAAI,GADX,SAKV0D,EAAkB,EACjB,sCAAqB,IAAbxI,EAAiB,QAAU,OAAnC,YACEwI,EAAkB,IAElB,KACJ,2BAAIJ,EAAcI,GAAiBH,KAAKrI,KAExC,KAKJ,yBACEQ,UAAU,6BACVC,MAAO,CACL0D,QAA0B,OAAjBrB,EAAwB,EAAI,EACrCpC,QAA0B,OAAjBoC,EAAwB,OAAS,SAG3C2F,EAAaJ,KACZ,yBAAK7H,UAAU,kBACb,4BAAKiI,EAAaJ,KAAKrI,IACtByI,EAAaF,SACZ,uBAAGkB,KAAI,UAAKhB,EAAaF,WAAa1I,EAAS,GAAGG,IAChD,MAEJ,MAEN,yBACEQ,UAAU,cACVC,MAAO,CAAEC,QAASiI,EAAiB,OAAS,SAE5C,yBACEnI,UAAU,gBACVG,QAAS,kBAAMiI,GAAkB,MAEnC,4BAAK/I,EAAS,GAAGG,IACjB,2BAAIH,EAAS,GAAGG,SE1DxB,IAAMF,EAAqB,CACzB+H,eTpB4B,SAAC6B,GAC7B,MAAO,CACL/J,KAAM,mBACNC,QAAS8J,KSoBExJ,cAAQ,KAAMJ,EAAdI,EA3Bf,YAAkC,IAAnB2H,EAAkB,EAAlBA,eAcb,OAbAkB,qBAAU,WACR,SAASY,IACP9B,EAAesB,OAAOS,YAMxB,OAJAT,OAAOC,iBAAiB,SAAUO,GAElCA,IAEO,SAACE,GACNV,OAAOE,oBAAoB,SAAUM,OAKvC,yBAAKnJ,UAAU,mBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UChBcsJ,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2D,oBClBAC,EAAe,CACnBpH,aAAc,MAYDrD,EATS,WAAmC,IAAlCU,EAAiC,uDAAzB+J,EAAcC,EAAW,uCACxD,OAAQA,EAAOxK,MACb,IAAK,oBACH,OAAO,2BAAKQ,GAAZ,IAAmB2C,aAAcqH,EAAOvK,UAC1C,QACE,OAAOO,ICTP+J,EAAe,CACnBlH,YAAa,KACboH,WAAY,GAYCzC,EATQ,WAAmC,IAAlCxH,EAAiC,uDAAzB+J,EAAcC,EAAW,uCACvD,OAAQA,EAAOxK,MACb,IAAK,mBACH,OAAO,2BAAKQ,GAAZ,IAAmB6C,YAAamH,EAAOvK,QAASwK,WAAYjK,EAAMiK,WAAa,IACjF,QACE,OAAOjK,ICVP+J,EAAe,CACnBrH,YAAa,MAYAgF,EATQ,WAAmC,IAAlC1H,EAAiC,uDAAzB+J,EAAcC,EAAW,uCACvD,OAAQA,EAAOxK,MACb,IAAK,mBACH,OAAO,2BAAKQ,GAAZ,IAAmB0C,YAAasH,EAAOvK,UACzC,QACE,OAAOO,ICTP+J,EAAe,CACnBlK,SAAU,GAoBGD,EAjBK,WAAmC,IAAlCI,EAAiC,uDAAzB+J,EAAcC,EAAW,uCACpD,OAAQA,EAAOxK,MACb,IAAK,eACH,IAAI0K,EAAcF,EAAOvK,QAQzB,YAPoB+E,IAAhB0F,IAEAA,EADqB,IAAnBlK,EAAMH,SACM,EAEA,GAGX,2BAAKG,GAAZ,IAAmBH,SAAUqK,IAC/B,QACE,OAAOlK,ICjBP+J,EAAe,CACnB1B,gBAAiB,MAYJZ,EATY,WAAmC,IAAlCzH,EAAiC,uDAAzB+J,EAAcC,EAAW,uCAC3D,OAAQA,EAAOxK,MACb,IAAK,uBACH,OAAO,2BAAKQ,GAAZ,IAAmBqI,gBAAiB2B,EAAOvK,UAC7C,QACE,OAAOO,ICTP+J,EAAe,CACnB9J,oBAAoB,GAYPH,EATgB,WAAmC,IAAlCE,EAAiC,uDAAzB+J,EAAcC,EAAW,uCAC/D,OAAQA,EAAOxK,MACb,IAAK,2BACH,OAAO,2BAAKQ,GAAZ,IAAmBC,oBAAqBD,EAAMC,qBAChD,QACE,OAAOD,ICDEmK,cAAgB,CAC7B7K,gBAAiBA,EACjBkI,eAAgBA,EAChBE,eAAgBA,EAChB9H,YAAaA,EACb6H,mBAAoBA,EACpB3H,uBAAwBA,ICJpBsK,EAAQC,YAAYC,GAE1BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAGJM,SAASC,eAAe,SRiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e7ee80d8.chunk.js","sourcesContent":["export const setClickedFloor = (index) => {\r\n  return {\r\n    type: \"SET_CLICKED_FLOOR\",\r\n    payload: index,\r\n  };\r\n};\r\n\r\nexport const setClickedRoom = (index) => {\r\n  return {\r\n    type: \"SET_CLICKED_ROOM\",\r\n    payload: index,\r\n  };\r\n};\r\n\r\nexport const setWindowWidth = (width) => {\r\n  return {\r\n    type: \"SET_WINDOW_WIDTH\",\r\n    payload: width,\r\n  };\r\n};\r\n\r\nexport const setLanguage = (language) => {\r\n  return {\r\n    type: \"SET_LANGUAGE\",\r\n    payload: language,\r\n  };\r\n};\r\n\r\nexport const setHoveredBuilding = (index) => {\r\n  return {\r\n    type: \"SET_HOVERED_BUILDING\",\r\n    payload: index,\r\n  };\r\n};\r\n\r\nexport const setIntroWindowVisisble = () => {\r\n  return {\r\n    type: \"SET_INTRO_WINDOW_VISIBLE\",\r\n  };\r\n};\r\n","const textData = [\r\n  [\"VILNIAUS TERMOFIKACINĖ ELEKTRINĖ TE-2\", \"VILNIUS THERMAL POWER PLANT TE-2\"],\r\n  [\r\n    `Kviečiame į virtualią ekskursiją – pasižvalgykite po šį sudėtingą energetikos objektą, kur pokario laikų istorija susipynusi su moderniomis šių dienų technologijomis.`,\r\n    `Welcome to our virtual tour! We invite you to explore this complex structure in which post-war history intertwines with modern-day technologies.`,\r\n  ],\r\n  [\"Sukite ir apsižvalgykite\", \"Rotate and look around\"],\r\n  [\"Eiti į virtualų turą\", \"Enter virtual tour\"],\r\n  [\r\n    \"Vilniaus termofikacinėje elektrinėje TE-2 prasideda šilumos kelias į Vilniaus pastatus – daugiau kaip 220 tūkst. būstų, biurų ir gamybinių patalpų. Tarsi širdis kraujagyslėmis varinėjanti kraują, TE-2 nenutrūkstamu ratu požeminiais vamzdynais – jų bendras ilgis yra virš 750 km – pumpuoja įkaitintą termofikacinį vandenį, kuris šaltuoju sezonu sušildo vilniečių namus ir biurus bei ištisus metus šildo vandenį, kuriuo prausiamės.\",\r\n    \"The journey of thermal energy to more than 220,000 homes, offices and industrial buildings of Vilnius begins at the thermal power plant TE-2. The central heating plant pushes heated feedwater through the 750 kilometres of pipelines, like a heart pumping blood to the veins, supplying heating and hot water to the homes and businesses of Vilnius. This ensures that the homes and offices of Vilnius are heated in colder months as well as being supplied with hot water all year round.\",\r\n  ],\r\n];\r\n\r\nexport default textData;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setLanguage, setIntroWindowVisisble } from \"../actions\";\r\nimport textData from \"../data/textData\";\r\n\r\nfunction IntroWindow({\r\n  language,\r\n  setLanguage,\r\n  introWindowVisible,\r\n  setIntroWindowVisisble,\r\n}) {\r\n  const [showWelcomeWindow, setShowWelcomeWindow] = useState(true);\r\n\r\n  return (\r\n    <div\r\n      className=\"intro-window-container\"\r\n      style={{ display: introWindowVisible ? \"flex\" : \"none\" }}\r\n    >\r\n      <div\r\n        className=\"welcome-container\"\r\n        style={{ display: showWelcomeWindow ? \"flex\" : \"none\" }}\r\n      >\r\n        <div className=\"middle-section\">\r\n          <h1>{textData[0][language]}</h1>\r\n          <p>{textData[1][language]}</p>\r\n          <div\r\n            className=\"btn btn-start\"\r\n            onClick={() => {\r\n              setShowWelcomeWindow(false);\r\n              setTimeout(function () {\r\n                setIntroWindowVisisble();\r\n              }, 1500);\r\n            }}\r\n            style={{\r\n              backgroundImage:\r\n                language === 0\r\n                  ? `url('./images/Asset 22.png')`\r\n                  : `url('./images/Asset 21.png')`,\r\n            }}\r\n          ></div>\r\n        </div>\r\n\r\n        <div\r\n          className=\"btn btn-language\"\r\n          onClick={() => {\r\n            setLanguage();\r\n          }}\r\n          style={{\r\n            backgroundImage:\r\n              language === 0\r\n                ? `url('./images/Asset 24.png')`\r\n                : `url('./images/Asset 23.png')`,\r\n          }}\r\n        ></div>\r\n      </div>\r\n      <div\r\n        className=\"info-container\"\r\n        style={{ display: showWelcomeWindow ? \"none\" : \"flex\" }}\r\n      >\r\n        <div className=\"image-rotate\"></div>\r\n        <p>{textData[2][language]}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.setLanguage.language,\r\n    introWindowVisible: state.setIntroWindowVisisble.introWindowVisible,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setLanguage,\r\n  setIntroWindowVisisble,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IntroWindow);\r\n","import { useLoader } from \"react-three-fiber\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\n\r\nfunction LoadPlantModel() {\r\n  const { nodes } = useLoader(GLTFLoader, \"./models/plant1.glb\");\r\n\r\n  const activeBuildings = [];\r\n  const buildingNumbers = [1, 2, 3, 4, 5];\r\n\r\n  const chimneyNumbers = [1, 2, 3];\r\n\r\n  buildingNumbers.forEach((number, index) => {\r\n    activeBuildings[index] = nodes[`tour_building_${number}_1`].geometry;\r\n  });\r\n\r\n  chimneyNumbers.forEach((number) => {\r\n    activeBuildings.push(nodes[`smoke_detector_${number}_1`].geometry);\r\n  });\r\n\r\n  const groundMesh = nodes.ground_1.geometry;\r\n  const roadMesh = nodes.road_1.geometry;\r\n  const buildingsMesh = nodes.extra_buildings_1.geometry;\r\n\r\n  const windowsMesh = nodes.windows_1.geometry;\r\n\r\n  const chimneyMesh01 = nodes.chimney_1_1.geometry;\r\n  const chimneyMesh02 = nodes.chimney_2_1.geometry;\r\n  const chimneyMesh03 = nodes.chimney_3_1.geometry;\r\n  const chimneyMeshes = { chimneyMesh01, chimneyMesh02, chimneyMesh03 };\r\n\r\n  const pipesGreyMesh = nodes.pipes_grey_1.geometry;\r\n  const pipesYellowMesh = nodes.pipes_yellow_1.geometry;\r\n  const pipesSupportMesh = nodes.pipe_support_1.geometry;\r\n  const pipesMeshes = { pipesGreyMesh, pipesYellowMesh, pipesSupportMesh };\r\n\r\n  //console.log(pipesMeshes);\r\n\r\n  return [\r\n    groundMesh,\r\n    roadMesh,\r\n    buildingsMesh,\r\n    chimneyMeshes,\r\n    activeBuildings,\r\n    pipesMeshes,\r\n    windowsMesh,\r\n  ];\r\n}\r\n\r\nexport default LoadPlantModel;\r\n","import React, { useRef, useState } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport { useLoader } from \"react-three-fiber\";\r\nimport LoadPlantModel from \"../functions/LoadPlantModel\";\r\n//import chimney_image from '/chimney_stripes.jpg'\r\n\r\nconst FloorsModel = ({\r\n  windowWidth,\r\n  clickedFloor,\r\n  clickedRoom,\r\n  onClickedFloorChange,\r\n  onClickedRoomChange,\r\n  onHoveredBuilgingChange,\r\n}) => {\r\n  const [\r\n    groundMesh,\r\n    roadMesh,\r\n    buildingsMesh,\r\n    chimneyMeshes,\r\n    activeBuildings,\r\n    pipesMeshes,\r\n    windowsMesh,\r\n  ] = LoadPlantModel();\r\n\r\n  LoadPlantModel();\r\n\r\n  //console.log(pipesMeshes);\r\n\r\n  const buildingsTexture = useLoader(\r\n    THREE.TextureLoader,\r\n    \"./models/buildings_main_Base_Color.jpg\"\r\n  );\r\n  buildingsTexture.wrapS = THREE.RepeatWrapping;\r\n  buildingsTexture.wrapT = THREE.RepeatWrapping;\r\n  buildingsTexture.repeat.set(1, 1);\r\n\r\n  const groundTexture = useLoader(\r\n    THREE.TextureLoader,\r\n    \"./models/ground_Base_Color.jpg\"\r\n  );\r\n  groundTexture.wrapS = THREE.RepeatWrapping;\r\n  groundTexture.wrapT = THREE.RepeatWrapping;\r\n  groundTexture.repeat.set(1, 1);\r\n\r\n  const buildingRef = useRef();\r\n  const floorRefs = useRef([]);\r\n  const materialRefs = useRef([]);\r\n  const roomRefs = useRef([[], [], [], [], []]);\r\n  const sideRefs = useRef([]);\r\n  const floorDistance = 10;\r\n\r\n  useFrame(() => {\r\n    const setMeshOpacity = (opacity, index) => {\r\n      materialRefs.current[index].opacity = opacity;\r\n      sideRefs.current[index].opacity = opacity;\r\n      roomRefs.current[index].forEach((roomRef) => {\r\n        roomRef.opacity = opacity;\r\n      });\r\n    };\r\n\r\n    const setMeshPosition = (meshRef, floorIndex, indexDifference) => {\r\n      let floorGap = 0;\r\n      if (indexDifference !== undefined) {\r\n        floorGap = indexDifference * 30;\r\n      }\r\n      let floorPosition = floorIndex * floorDistance - floorGap;\r\n\r\n      if (meshRef.position.y > floorPosition) {\r\n        if (indexDifference > 0 || indexDifference === undefined) {\r\n          meshRef.position.y -= animationSpeed;\r\n        }\r\n      } else if (meshRef.position.y < floorPosition) {\r\n        if (indexDifference < 0 || indexDifference === undefined) {\r\n          meshRef.position.y += animationSpeed;\r\n        }\r\n      }\r\n    };\r\n\r\n    const animationSpeed = 2;\r\n    // buildingRef.current.rotation.y += 0.001;\r\n    floorRefs.current.forEach((ref, index) => {\r\n      let meshOpacity = 1;\r\n      if (clickedFloor !== null) {\r\n        let indexDifference = clickedFloor - index;\r\n        meshOpacity = 0.2;\r\n        if (clickedFloor !== index) {\r\n          setMeshOpacity(meshOpacity, index);\r\n        }\r\n        setMeshPosition(ref, index, indexDifference);\r\n      } else {\r\n        setMeshOpacity(meshOpacity, index);\r\n        setMeshPosition(ref, index);\r\n      }\r\n    });\r\n  });\r\n\r\n  const [hoveredFloor, setHoveredFloor] = useState(null);\r\n  const [hoveredRoom, setHoveredRoom] = useState(null);\r\n\r\n  const hoveredOnFloor = (index, mouseInside) => {\r\n    // if (clickedFloor === null) {\r\n    //   if (mouseInside) {\r\n    //     setHoveredFloor(index);\r\n    //   } else if (hoveredFloor === index) {\r\n    //     setHoveredFloor(null);\r\n    //   }\r\n    // } else {\r\n    //   setHoveredFloor(null);\r\n    // }\r\n\r\n    if (mouseInside) {\r\n      setHoveredFloor(index);\r\n      onHoveredBuilgingChange(index);\r\n    } else if (hoveredFloor === index) {\r\n      setHoveredFloor(null);\r\n      onHoveredBuilgingChange(null);\r\n    }\r\n  };\r\n\r\n  const clickedOnFloor = (index) => {\r\n    onClickedFloorChange(index);\r\n    // if (clickedFloor === null) {\r\n    //   onClickedFloorChange(index);\r\n    // }\r\n  };\r\n\r\n  const clickedOnRoom = (index, event) => {\r\n    if (clickedFloor !== null) {\r\n      event.stopPropagation();\r\n      onClickedRoomChange(index);\r\n    }\r\n  };\r\n\r\n  const hoveredOnRoom = (floorIndex, roomIndex, mouseInside, event) => {\r\n    if (clickedFloor !== null && clickedFloor === floorIndex) {\r\n      event.stopPropagation();\r\n      if (mouseInside) {\r\n        setHoveredRoom(roomIndex);\r\n      } else if (hoveredRoom === roomIndex) {\r\n        setHoveredRoom(null);\r\n      }\r\n    }\r\n  };\r\n\r\n  const convertDegreesToRadians = (x, y, z) => {\r\n    let degrees = [x, y, z];\r\n    return (degrees = degrees.map((degree) => degree * (Math.PI / 180)));\r\n  };\r\n\r\n  return (\r\n    <group\r\n      ref={buildingRef}\r\n      position={[0, 0, 0]}\r\n      rotation={convertDegreesToRadians(-90, 0, 0)}\r\n    >\r\n      {activeBuildings.map((building, buildingIndex) => (\r\n        <mesh\r\n          geometry={building}\r\n          key={buildingIndex}\r\n          dispose={null}\r\n          onPointerOver={(e) => {\r\n            e.stopPropagation();\r\n            hoveredOnFloor(buildingIndex, true);\r\n          }}\r\n          onPointerOut={(e) => {\r\n            e.intersections.length && hoveredOnFloor(buildingIndex, false);\r\n          }}\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            clickedOnFloor(buildingIndex);\r\n          }}\r\n        >\r\n          <meshStandardMaterial\r\n            attach=\"material\"\r\n            transparent={true}\r\n            map={buildingsTexture}\r\n            color={hoveredFloor === buildingIndex ? \"#A96666\" : \"white\"}\r\n          />\r\n        </mesh>\r\n      ))}\r\n      <mesh geometry={windowsMesh}>\r\n        <meshStandardMaterial\r\n          attach=\"material\"\r\n          transparent={true}\r\n          color={\"white\"}\r\n          map={buildingsTexture}\r\n        />\r\n      </mesh>\r\n      <mesh geometry={groundMesh}>\r\n        <meshStandardMaterial\r\n          attach=\"material\"\r\n          transparent={true}\r\n          map={groundTexture}\r\n          color={\"white\"}\r\n        />\r\n      </mesh>\r\n      <mesh geometry={roadMesh}>\r\n        <meshStandardMaterial\r\n          attach=\"material\"\r\n          transparent={true}\r\n          color={\"#CDCDCD\"}\r\n        />\r\n      </mesh>\r\n      <mesh geometry={buildingsMesh}>\r\n        <meshStandardMaterial\r\n          attach=\"material\"\r\n          transparent={true}\r\n          color={\"white\"}\r\n        />\r\n      </mesh>\r\n      <mesh geometry={chimneyMeshes.chimneyMesh01}>\r\n        <meshStandardMaterial\r\n          attach=\"material\"\r\n          color={\"white\"}\r\n          map={buildingsTexture}\r\n        />\r\n      </mesh>\r\n      <mesh geometry={chimneyMeshes.chimneyMesh02}>\r\n        <meshStandardMaterial attach=\"material\" color={\"white\"} />\r\n      </mesh>\r\n      <mesh geometry={chimneyMeshes.chimneyMesh03}>\r\n        <meshStandardMaterial\r\n          attach=\"material\"\r\n          color={\"white\"}\r\n          map={buildingsTexture}\r\n        />\r\n      </mesh>\r\n      <mesh geometry={pipesMeshes.pipesGreyMesh}>\r\n        <meshStandardMaterial attach=\"material\" color={\"#CDCDCD\"} />\r\n      </mesh>\r\n      <mesh geometry={pipesMeshes.pipesYellowMesh}>\r\n        <meshStandardMaterial attach=\"material\" color={\"#CEB94F\"} />\r\n      </mesh>\r\n      <mesh geometry={pipesMeshes.pipesSupportMesh}>\r\n        <meshStandardMaterial attach=\"material\" color={\"#CEB94F\"} />\r\n      </mesh>\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default FloorsModel;\r\n","import React, { useRef, Suspense } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setClickedFloor,\r\n  setClickedRoom,\r\n  setHoveredBuilding,\r\n} from \"../actions\";\r\nimport { Canvas, useFrame, useThree, extend } from \"react-three-fiber\";\r\nimport { softShadows } from \"drei\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport PowerPlantModel from \"./PowerPlantModel\";\r\n\r\nextend({ OrbitControls });\r\nsoftShadows();\r\n\r\nconst CameraControls = ({ windowWidth }) => {\r\n  const {\r\n    camera,\r\n    gl: { domElement },\r\n  } = useThree();\r\n  const controls = useRef();\r\n  useFrame((state) => controls.current.update());\r\n  let minDistance = 50;\r\n  let maxDistance = 250;\r\n  // if (windowWidth < 450) {\r\n  //   minDistance = 250;\r\n  //   maxDistance = 400;\r\n  // }\r\n  return (\r\n    <orbitControls\r\n      ref={controls}\r\n      args={[camera, domElement]}\r\n      minDistance={minDistance}\r\n      maxDistance={maxDistance}\r\n      minPolarAngle={1.2}\r\n      maxPolarAngle={1.2}\r\n    />\r\n  );\r\n};\r\n\r\nfunction FloorsScene({\r\n  windowWidth,\r\n  clickedFloor,\r\n  clickedRoom,\r\n  setClickedFloor,\r\n  setClickedRoom,\r\n  setHoveredBuilding,\r\n}) {\r\n  const clickedFloorChange = (index) => {\r\n    setClickedFloor(index);\r\n  };\r\n\r\n  const clickedRoomChange = (index) => {\r\n    setClickedRoom(index);\r\n  };\r\n\r\n  const hoveredBuildingChange = (index) => {\r\n    setHoveredBuilding(index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"floor-scene-container\">\r\n      <Canvas\r\n        colorManagement\r\n        shadowMap\r\n        camera={{ position: [160, 50, -140], fov: 30 }}\r\n      >\r\n        <CameraControls windowWidth={windowWidth} />\r\n        <ambientLight intensity={0.6} />\r\n        <pointLight position={[-10, 100, -20]} intensity={0.5} />\r\n        <group>\r\n          <Suspense fallback={null}>\r\n            <PowerPlantModel\r\n              onClickedFloorChange={clickedFloorChange}\r\n              onClickedRoomChange={clickedRoomChange}\r\n              onHoveredBuilgingChange={hoveredBuildingChange}\r\n              clickedFloor={clickedFloor}\r\n              clickedRoom={clickedRoom}\r\n              windowWidth={windowWidth}\r\n            />\r\n          </Suspense>\r\n        </group>\r\n      </Canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    clickedFloor: state.setClickedFloor.clickedFloor,\r\n    clickedRoom: state.setClickedRoom.clickedRoom,\r\n    windowWidth: state.setWindowWidth.windowWidth,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setClickedFloor,\r\n  setClickedRoom,\r\n  setHoveredBuilding,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FloorsScene);\r\n","const buildingsData = [\r\n  {\r\n    name: [\r\n      \"Gamybinis pastatas (pagrindinis korpusas)\",\r\n      \"Production Plant (Main building)\",\r\n    ],\r\n    description: [\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil.\",\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus.\",\r\n    ],\r\n    tourLink: \"http://e2.chc.lt/turas1/\",\r\n  },\r\n  {\r\n    name: [\"Vandens šildymo katilinė Nr.1\", \"Boiler Room 1\"],\r\n    description: [\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil.\",\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus.\",\r\n    ],\r\n    tourLink: \"http://e2.chc.lt/turas2/\",\r\n  },\r\n  {\r\n    name: [\"Biokuro ūkis\", \"Biofuel\"],\r\n    description: [\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil.\",\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus.\",\r\n    ],\r\n    tourLink: \"http://e2.chc.lt/turas3/\",\r\n  },\r\n  {\r\n    name: [\"Vanduo šilumos gamyboje\", \"Water in heat production\"],\r\n    description: [\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil.\",\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus.\",\r\n    ],\r\n    tourLink: \"http://e2.chc.lt/turas4/\",\r\n  },\r\n  {\r\n    name: [\"Slėptuvė\", \"Bunker\"],\r\n    description: [\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil.\",\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus.\",\r\n    ],\r\n    tourLink: \"http://e2.chc.lt/turas5/\",\r\n  },\r\n  {\r\n    name: [\"Ekonomaizeris\", \"Economizer\"],\r\n    description: [\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil.\",\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus.\",\r\n    ],\r\n  },\r\n  {\r\n    name: [\"Ekonomaizeris\", \"Economizer\"],\r\n    description: [\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil.\",\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus.\",\r\n    ],\r\n  },\r\n  {\r\n    name: [\"Ekonomaizeris\", \"Economizer\"],\r\n    description: [\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil.\",\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus.\",\r\n    ],\r\n  },\r\n];\r\n\r\nexport default buildingsData;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { useMousePosition } from \"../hooks/useMousePosition\";\r\n\r\nimport { setClickedFloor } from \"../actions\";\r\nimport textData from \"../data/textData\";\r\n\r\nimport buildingsData from \"../data/buildingsData\";\r\n\r\nfunction InfoWindow({\r\n  clickedFloor,\r\n  language,\r\n  hoveredBuilding,\r\n  introWindowVisible,\r\n  setClickedFloor,\r\n}) {\r\n  const [buildingText, setBuildingText] = useState(\"\");\r\n  const [showInfoWindow, setShowInfoWindow] = useState(false);\r\n\r\n  const mousePosition = useMousePosition();\r\n\r\n  useEffect(() => {\r\n    if (clickedFloor !== null) {\r\n      setBuildingText(buildingsData[clickedFloor]);\r\n      setShowInfoWindow(false);\r\n    }\r\n  }, [clickedFloor]);\r\n\r\n  return (\r\n    <div className=\"pop-up-windows\">\r\n      <div className=\"top-container\">\r\n        <div className=\"logo\"></div>\r\n        <div\r\n          className=\"btn btn-info\"\r\n          onClick={() => {\r\n            setShowInfoWindow(true);\r\n            setClickedFloor(null);\r\n          }}\r\n          style={{\r\n            opacity: introWindowVisible ? \"0\" : \"1\",\r\n            pointerEvents: introWindowVisible ? \"none\" : \"auto\",\r\n          }}\r\n        ></div>\r\n      </div>\r\n      {hoveredBuilding !== null ? (\r\n        <div\r\n          className=\"building-hover-box\"\r\n          style={{\r\n            transform: `translate(calc(-100vw + ${mousePosition.x + 20}px),${\r\n              mousePosition.y + 10\r\n            }px)`,\r\n          }}\r\n        >\r\n          {hoveredBuilding < 5 ? (\r\n            <h1>{`${language === 0 ? \"Turas\" : \"Tour\"} ${\r\n              hoveredBuilding + 1\r\n            }`}</h1>\r\n          ) : null}\r\n          <p>{buildingsData[hoveredBuilding].name[language]}</p>\r\n        </div>\r\n      ) : null}\r\n      {/* <div\r\n        className=\"disable-click-overlay\"\r\n        style={{ display: clickedFloor !== null ? \"flex\" : \"none\" }}\r\n      ></div> */}\r\n      <div\r\n        className=\"pop-up-container container\"\r\n        style={{\r\n          opacity: clickedFloor !== null ? 1 : 0,\r\n          display: clickedFloor !== null ? \"flex\" : \"none\",\r\n        }}\r\n      >\r\n        {buildingText.name ? (\r\n          <div className=\"text-container\">\r\n            <h1>{buildingText.name[language]}</h1>\r\n            {buildingText.tourLink ? (\r\n              <a href={`${buildingText.tourLink}`}>{textData[3][language]}</a>\r\n            ) : null}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n      <div\r\n        className=\"info-window\"\r\n        style={{ display: showInfoWindow ? \"flex\" : \"none\" }}\r\n      >\r\n        <div\r\n          className=\"btn btn-close\"\r\n          onClick={() => setShowInfoWindow(false)}\r\n        ></div>\r\n        <h1>{textData[0][language]}</h1>\r\n        <p>{textData[4][language]}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    clickedFloor: state.setClickedFloor.clickedFloor,\r\n    language: state.setLanguage.language,\r\n    hoveredBuilding: state.setHoveredBuilding.hoveredBuilding,\r\n    introWindowVisible: state.setIntroWindowVisisble.introWindowVisible,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setClickedFloor,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InfoWindow);\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const useMousePosition = () => {\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n\r\n  useEffect(() => {\r\n    const setFromEvent = (e) => setPosition({ x: e.clientX, y: e.clientY });\r\n    window.addEventListener(\"mousemove\", setFromEvent);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", setFromEvent);\r\n    };\r\n  }, []);\r\n\r\n  return position;\r\n};\r\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport IntroWindow from \"./components/IntroWindow\";\nimport FloorsScene from \"./components/FloorsScene\";\nimport InfoWindow from \"./components/InfoWindow\";\nimport { setWindowWidth } from \"./actions\";\n\n//\"homepage\": \"https://robertasliekis.github.io/power-plant-3d/\",\n\nfunction App({ setWindowWidth }) {\n  useEffect(() => {\n    function handleResize() {\n      setWindowWidth(window.innerWidth);\n    }\n    window.addEventListener(\"resize\", handleResize);\n\n    handleResize();\n\n    return (_) => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  });\n\n  return (\n    <div className=\"website-wrapper\">\n      <IntroWindow />\n      <FloorsScene />\n      <InfoWindow />\n    </div>\n  );\n}\n\nconst mapDispatchToProps = {\n  setWindowWidth,\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n  clickedFloor: null\r\n};\r\n\r\nconst setClickedFloor = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_CLICKED_FLOOR\":\r\n      return { ...state, clickedFloor: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setClickedFloor;\r\n","const initialState = {\r\n  clickedRoom: null,\r\n  clickCount: 0\r\n};\r\n\r\nconst setClickedRoom = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_CLICKED_ROOM\":\r\n      return { ...state, clickedRoom: action.payload, clickCount: state.clickCount + 1 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setClickedRoom;\r\n","const initialState = {\r\n  windowWidth: null,\r\n};\r\n\r\nconst setWindowWidth = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_WINDOW_WIDTH\":\r\n      return { ...state, windowWidth: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setWindowWidth;\r\n","const initialState = {\r\n  language: 0,\r\n};\r\n\r\nconst setLanguage = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_LANGUAGE\":\r\n      let newLanguage = action.payload;\r\n      if (newLanguage === undefined) {\r\n        if (state.language === 1) {\r\n          newLanguage = 0;\r\n        } else {\r\n          newLanguage = 1;\r\n        }\r\n      }\r\n      return { ...state, language: newLanguage };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setLanguage;\r\n","const initialState = {\r\n  hoveredBuilding: null,\r\n};\r\n\r\nconst setHoveredBuilding = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_HOVERED_BUILDING\":\r\n      return { ...state, hoveredBuilding: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setHoveredBuilding;\r\n","const initialState = {\r\n  introWindowVisible: true,\r\n};\r\n\r\nconst setIntroWindowVisisble = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_INTRO_WINDOW_VISIBLE\":\r\n      return { ...state, introWindowVisible: !state.introWindowVisible };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setIntroWindowVisisble;\r\n","import { combineReducers } from \"redux\";\r\nimport setClickedFloor from \"./setClickedFloor\";\r\nimport setClickedRoom from \"./setClickedRoom\";\r\nimport setWindowWidth from \"./setWindowWidth\";\r\nimport setLanguage from \"./setLanguage\";\r\nimport setHoveredBuilding from \"./setHoveredBuilding\";\r\nimport setIntroWindowVisisble from \"./setIntroWindowVisisble\";\r\n\r\nexport default combineReducers({\r\n  setClickedFloor: setClickedFloor,\r\n  setClickedRoom: setClickedRoom,\r\n  setWindowWidth: setWindowWidth,\r\n  setLanguage: setLanguage,\r\n  setHoveredBuilding: setHoveredBuilding,\r\n  setIntroWindowVisisble: setIntroWindowVisisble,\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducers from \"./reducers/allReducers\";\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}