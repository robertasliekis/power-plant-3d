{"version":3,"sources":["actions/index.js","functions/LoadPlantModel.js","components/PowerPlantModel.js","components/FloorsScene.js","data/buildingsData.js","components/InfoWindow.js","App.js","serviceWorker.js","reducers/setClickedFloor.js","reducers/setClickedRoom.js","reducers/setWindowWidth.js","reducers/allReducers.js","index.js"],"names":["setClickedFloor","index","type","payload","setClickedRoom","LoadPlantModel","nodes","useLoader","GLTFLoader","activeBuildings","forEach","number","geometry","push","groundMesh","ground_1","roadMesh","road_1","buildingsMesh","extra_buildings_1","chimneyMeshes","chimneyMesh01","chimney_1_1","chimneyMesh02","chimney_2_1","chimneyMesh03","chimney_3_1","pipesGreyMesh","pipes_grey_1","pipesYellowMesh","pipes_yellow_1","pipesSupportMesh","pipe_support_1","FloorsModel","windowWidth","clickedFloor","onClickedFloorChange","clickedRoom","onClickedRoomChange","pipesMeshes","chimneyTexture","THREE","wrapS","wrapT","repeat","set","buildingRef","useRef","floorRefs","materialRefs","roomRefs","sideRefs","useFrame","setMeshOpacity","opacity","current","roomRef","setMeshPosition","meshRef","floorIndex","indexDifference","floorGap","undefined","floorPosition","position","y","animationSpeed","ref","meshOpacity","useState","hoveredFloor","setHoveredFloor","hoveredOnFloor","mouseInside","rotation","x","z","degrees","map","degree","Math","PI","convertDegreesToRadians","building","buildingIndex","key","dispose","onPointerOver","e","stopPropagation","onPointerOut","intersections","length","onClick","attach","transparent","color","extend","OrbitControls","softShadows","CameraControls","useThree","camera","domElement","gl","controls","state","update","args","minDistance","maxDistance","minPolarAngle","maxPolarAngle","mapDispatchToProps","connect","setWindowWidth","className","colorManagement","shadowMap","fov","intensity","fallback","PowerPlantModel","buildingsData","name","description","tourLink","floorText","setFloorText","useEffect","style","transform","href","icon","faTimes","width","handleResize","window","innerWidth","addEventListener","_","removeEventListener","Boolean","location","hostname","match","initialState","action","clickCount","combineReducers","store","createStore","reducers","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a063d6be.chunk.js","sourcesContent":["export const setClickedFloor = (index) => {\r\n  return {\r\n    type: \"SET_CLICKED_FLOOR\",\r\n    payload: index\r\n  };\r\n};\r\n\r\nexport const setClickedRoom = (index) => {\r\n  return {\r\n    type: \"SET_CLICKED_ROOM\",\r\n    payload: index\r\n  };\r\n};\r\n\r\nexport const setWindowWidth = (width) => {\r\n  return {\r\n    type: \"SET_WINDOW_WIDTH\",\r\n    payload: width\r\n  };\r\n};\r\n","import { useLoader } from \"react-three-fiber\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\n\r\nfunction LoadPlantModel() {\r\n  const { nodes } = useLoader(GLTFLoader, \"./models/plant1.glb\");\r\n\r\n  const activeBuildings = [];\r\n  const buildingNumbers = [1, 2, 3, 4, 5];\r\n\r\n  const chimneyNumbers = [1, 2, 3];\r\n\r\n  buildingNumbers.forEach((number, index) => {\r\n    activeBuildings[index] = nodes[`tour_building_${number}_1`].geometry;\r\n  });\r\n\r\n  chimneyNumbers.forEach((number) => {\r\n    activeBuildings.push(nodes[`smoke_detector_${number}_1`].geometry);\r\n  });\r\n\r\n  const groundMesh = nodes.ground_1.geometry;\r\n  const roadMesh = nodes.road_1.geometry;\r\n  const buildingsMesh = nodes.extra_buildings_1.geometry;\r\n\r\n  const chimneyMesh01 = nodes.chimney_1_1.geometry;\r\n  const chimneyMesh02 = nodes.chimney_2_1.geometry;\r\n  const chimneyMesh03 = nodes.chimney_3_1.geometry;\r\n  const chimneyMeshes = { chimneyMesh01, chimneyMesh02, chimneyMesh03 };\r\n\r\n  const pipesGreyMesh = nodes.pipes_grey_1.geometry;\r\n  const pipesYellowMesh = nodes.pipes_yellow_1.geometry;\r\n  const pipesSupportMesh = nodes.pipe_support_1.geometry;\r\n  const pipesMeshes = { pipesGreyMesh, pipesYellowMesh, pipesSupportMesh };\r\n\r\n  //console.log(pipesMeshes);\r\n\r\n  return [\r\n    groundMesh,\r\n    roadMesh,\r\n    buildingsMesh,\r\n    chimneyMeshes,\r\n    activeBuildings,\r\n    pipesMeshes,\r\n  ];\r\n}\r\n\r\nexport default LoadPlantModel;\r\n","import React, { useRef, useState } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport { useLoader } from \"react-three-fiber\";\r\nimport LoadPlantModel from \"../functions/LoadPlantModel\";\r\n//import chimney_image from '/chimney_stripes.jpg'\r\n\r\nconst FloorsModel = ({\r\n  windowWidth,\r\n  clickedFloor,\r\n  clickedRoom,\r\n  onClickedFloorChange,\r\n  onClickedRoomChange,\r\n}) => {\r\n  const [\r\n    groundMesh,\r\n    roadMesh,\r\n    buildingsMesh,\r\n    chimneyMeshes,\r\n    activeBuildings,\r\n    pipesMeshes,\r\n  ] = LoadPlantModel();\r\n\r\n  LoadPlantModel();\r\n\r\n  //console.log(pipesMeshes);\r\n\r\n  const chimneyTexture = useLoader(\r\n    THREE.TextureLoader,\r\n    \"./models/chimney_stripes.jpg\"\r\n  );\r\n  chimneyTexture.wrapS = THREE.RepeatWrapping;\r\n  chimneyTexture.wrapT = THREE.RepeatWrapping;\r\n  chimneyTexture.repeat.set(1, 1);\r\n\r\n  const buildingRef = useRef();\r\n  const floorRefs = useRef([]);\r\n  const materialRefs = useRef([]);\r\n  const roomRefs = useRef([[], [], [], [], []]);\r\n  const sideRefs = useRef([]);\r\n  const floorDistance = 10;\r\n\r\n  useFrame(() => {\r\n    const setMeshOpacity = (opacity, index) => {\r\n      materialRefs.current[index].opacity = opacity;\r\n      sideRefs.current[index].opacity = opacity;\r\n      roomRefs.current[index].forEach((roomRef) => {\r\n        roomRef.opacity = opacity;\r\n      });\r\n    };\r\n\r\n    const setMeshPosition = (meshRef, floorIndex, indexDifference) => {\r\n      let floorGap = 0;\r\n      if (indexDifference !== undefined) {\r\n        floorGap = indexDifference * 30;\r\n      }\r\n      let floorPosition = floorIndex * floorDistance - floorGap;\r\n\r\n      if (meshRef.position.y > floorPosition) {\r\n        if (indexDifference > 0 || indexDifference === undefined) {\r\n          meshRef.position.y -= animationSpeed;\r\n        }\r\n      } else if (meshRef.position.y < floorPosition) {\r\n        if (indexDifference < 0 || indexDifference === undefined) {\r\n          meshRef.position.y += animationSpeed;\r\n        }\r\n      }\r\n    };\r\n\r\n    const animationSpeed = 2;\r\n    // buildingRef.current.rotation.y += 0.001;\r\n    floorRefs.current.forEach((ref, index) => {\r\n      let meshOpacity = 1;\r\n      if (clickedFloor !== null) {\r\n        let indexDifference = clickedFloor - index;\r\n        meshOpacity = 0.2;\r\n        if (clickedFloor !== index) {\r\n          setMeshOpacity(meshOpacity, index);\r\n        }\r\n        setMeshPosition(ref, index, indexDifference);\r\n      } else {\r\n        setMeshOpacity(meshOpacity, index);\r\n        setMeshPosition(ref, index);\r\n      }\r\n    });\r\n  });\r\n\r\n  const [hoveredFloor, setHoveredFloor] = useState(null);\r\n  const [hoveredRoom, setHoveredRoom] = useState(null);\r\n\r\n  const hoveredOnFloor = (index, mouseInside) => {\r\n    // if (clickedFloor === null) {\r\n    //   if (mouseInside) {\r\n    //     setHoveredFloor(index);\r\n    //   } else if (hoveredFloor === index) {\r\n    //     setHoveredFloor(null);\r\n    //   }\r\n    // } else {\r\n    //   setHoveredFloor(null);\r\n    // }\r\n\r\n    if (mouseInside) {\r\n      setHoveredFloor(index);\r\n    } else if (hoveredFloor === index) {\r\n      setHoveredFloor(null);\r\n    }\r\n  };\r\n\r\n  const clickedOnFloor = (index) => {\r\n    onClickedFloorChange(index);\r\n    // if (clickedFloor === null) {\r\n    //   onClickedFloorChange(index);\r\n    // }\r\n  };\r\n\r\n  const clickedOnRoom = (index, event) => {\r\n    if (clickedFloor !== null) {\r\n      event.stopPropagation();\r\n      onClickedRoomChange(index);\r\n    }\r\n  };\r\n\r\n  const hoveredOnRoom = (floorIndex, roomIndex, mouseInside, event) => {\r\n    if (clickedFloor !== null && clickedFloor === floorIndex) {\r\n      event.stopPropagation();\r\n      if (mouseInside) {\r\n        setHoveredRoom(roomIndex);\r\n      } else if (hoveredRoom === roomIndex) {\r\n        setHoveredRoom(null);\r\n      }\r\n    }\r\n  };\r\n\r\n  const convertDegreesToRadians = (x, y, z) => {\r\n    let degrees = [x, y, z];\r\n    return (degrees = degrees.map((degree) => degree * (Math.PI / 180)));\r\n  };\r\n\r\n  return (\r\n    <group\r\n      ref={buildingRef}\r\n      position={[0, 0, 0]}\r\n      rotation={convertDegreesToRadians(-90, 0, 0)}\r\n    >\r\n      {activeBuildings.map((building, buildingIndex) => (\r\n        <mesh\r\n          geometry={building}\r\n          key={buildingIndex}\r\n          dispose={null}\r\n          onPointerOver={(e) => {\r\n            e.stopPropagation();\r\n            hoveredOnFloor(buildingIndex, true);\r\n          }}\r\n          onPointerOut={(e) => {\r\n            e.intersections.length && hoveredOnFloor(buildingIndex, false);\r\n          }}\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            clickedOnFloor(buildingIndex);\r\n          }}\r\n        >\r\n          <meshStandardMaterial\r\n            attach=\"material\"\r\n            transparent={true}\r\n            color={hoveredFloor === buildingIndex ? \"#00FBFF\" : \"grey\"}\r\n          />\r\n        </mesh>\r\n      ))}\r\n      <mesh geometry={groundMesh}>\r\n        <meshStandardMaterial\r\n          attach=\"material\"\r\n          transparent={true}\r\n          color={\"white\"}\r\n        />\r\n      </mesh>\r\n      <mesh geometry={roadMesh}>\r\n        <meshStandardMaterial\r\n          attach=\"material\"\r\n          transparent={true}\r\n          color={\"#CDCDCD\"}\r\n        />\r\n      </mesh>\r\n      <mesh geometry={buildingsMesh}>\r\n        <meshStandardMaterial\r\n          attach=\"material\"\r\n          transparent={true}\r\n          color={\"white\"}\r\n        />\r\n      </mesh>\r\n      <mesh geometry={chimneyMeshes.chimneyMesh01}>\r\n        <meshStandardMaterial\r\n          attach=\"material\"\r\n          color={\"white\"}\r\n          map={chimneyTexture}\r\n        />\r\n      </mesh>\r\n      <mesh geometry={chimneyMeshes.chimneyMesh02}>\r\n        <meshStandardMaterial attach=\"material\" color={\"white\"} />\r\n      </mesh>\r\n      <mesh geometry={chimneyMeshes.chimneyMesh03}>\r\n        <meshStandardMaterial\r\n          attach=\"material\"\r\n          color={\"white\"}\r\n          map={chimneyTexture}\r\n        />\r\n      </mesh>\r\n      <mesh geometry={pipesMeshes.pipesGreyMesh}>\r\n        <meshStandardMaterial attach=\"material\" color={\"#CDCDCD\"} />\r\n      </mesh>\r\n      <mesh geometry={pipesMeshes.pipesYellowMesh}>\r\n        <meshStandardMaterial attach=\"material\" color={\"yellow\"} />\r\n      </mesh>\r\n      <mesh geometry={pipesMeshes.pipesSupportMesh}>\r\n        <meshStandardMaterial attach=\"material\" color={\"yellow\"} />\r\n      </mesh>\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default FloorsModel;\r\n","import React, { useRef, Suspense } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setClickedFloor, setClickedRoom } from \"../actions\";\r\nimport { Canvas, useFrame, useThree, extend } from \"react-three-fiber\";\r\nimport { softShadows } from \"drei\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n//import FloorsModel from \"./FloorsModel\";\r\nimport PowerPlantModel from \"./PowerPlantModel\";\r\n\r\nextend({ OrbitControls });\r\nsoftShadows();\r\n\r\nconst CameraControls = ({ windowWidth }) => {\r\n  const {\r\n    camera,\r\n    gl: { domElement }\r\n  } = useThree();\r\n  const controls = useRef();\r\n  useFrame((state) => controls.current.update());\r\n  let minDistance = 50;\r\n  let maxDistance = 250;\r\n  // if (windowWidth < 450) {\r\n  //   minDistance = 250;\r\n  //   maxDistance = 400;\r\n  // }\r\n  return (\r\n    <orbitControls\r\n      ref={controls}\r\n      args={[camera, domElement]}\r\n      minDistance={minDistance}\r\n      maxDistance={maxDistance}\r\n      minPolarAngle={1.2}\r\n      maxPolarAngle={1.2}\r\n    />\r\n  );\r\n};\r\n\r\nfunction FloorsScene({ windowWidth, clickedFloor, clickedRoom, setClickedFloor, setClickedRoom }) {\r\n  const clickedFloorChange = (index) => {\r\n    setClickedFloor(index);\r\n  };\r\n\r\n  const clickedRoomChange = (index) => {\r\n    setClickedRoom(index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"floor-scene-container\">\r\n      <Canvas colorManagement shadowMap camera={{ position: [160, 50, -140], fov: 30 }}>\r\n        <CameraControls windowWidth={windowWidth} />\r\n        <ambientLight intensity={0.6} />\r\n        <pointLight position={[-10, 100, -20]} intensity={0.5} />\r\n        <group>\r\n          <Suspense fallback={null}>\r\n            <PowerPlantModel\r\n              onClickedFloorChange={clickedFloorChange}\r\n              onClickedRoomChange={clickedRoomChange}\r\n              clickedFloor={clickedFloor}\r\n              clickedRoom={clickedRoom}\r\n              windowWidth={windowWidth}\r\n            />\r\n          </Suspense>\r\n        </group>\r\n      </Canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    clickedFloor: state.setClickedFloor.clickedFloor,\r\n    clickedRoom: state.setClickedRoom.clickedRoom,\r\n    windowWidth: state.setWindowWidth.windowWidth\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setClickedFloor,\r\n  setClickedRoom\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FloorsScene);\r\n","const buildingsData = [\r\n  {\r\n    name: \"Building 1\",\r\n    description:\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil cum illo magnam consequatur quo! Quos voluptates quis consequatur blanditiis placeat nisi, eius dignissimos itaque.\",\r\n    tourLink: \"http://e2.chc.lt/turas1/\",\r\n  },\r\n  {\r\n    name: \"Building 2\",\r\n    description:\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil cum illo magnam consequatur quo! Quos voluptates quis.\",\r\n    tourLink: \"http://e2.chc.lt/turas2/\",\r\n  },\r\n  {\r\n    name: \"Building 3\",\r\n    description:\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil cum illo magnam consequatur quo! Quos voluptates quis consequatur blanditiis..\",\r\n    tourLink: \"http://e2.chc.lt/turas3/\",\r\n  },\r\n  {\r\n    name: \"Building 4\",\r\n    description:\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil cum illo.\",\r\n    tourLink: \"http://e2.chc.lt/turas4/\",\r\n  },\r\n  {\r\n    name: \"Building 5\",\r\n    description:\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil cum illo.\",\r\n    tourLink: \"http://e2.chc.lt/turas5/\",\r\n  },\r\n  {\r\n    name: \"Smoke detector\",\r\n    description:\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil cum illo magnam consequatur quo! Quos voluptates quis consequatur blanditiis..\",\r\n  },\r\n  {\r\n    name: \"Smoke detector\",\r\n    description:\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil cum illo.\",\r\n  },\r\n  {\r\n    name: \"Smoke detector\",\r\n    description:\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil cum illo.\",\r\n  },\r\n];\r\n\r\nexport default buildingsData;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setClickedFloor, setClickedRoom } from \"../actions\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport buildingsData from \"../data/buildingsData\";\r\n\r\nfunction InfoWindow({ clickedFloor, setClickedFloor }) {\r\n  const [floorText, setFloorText] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (clickedFloor !== null) {\r\n      setFloorText(buildingsData[clickedFloor]);\r\n    }\r\n  }, [clickedFloor]);\r\n\r\n  return (\r\n    <div className=\"info-window\">\r\n      <div\r\n        className=\"floor-container container\"\r\n        style={{\r\n          transform:\r\n            clickedFloor !== null ? \"translate(-100%, 0)\" : \"translate(0, 0)\",\r\n          opacity: clickedFloor !== null ? 1 : 0,\r\n        }}\r\n      >\r\n        <div className=\"text-container\">\r\n          <h1>{`${floorText.name}`}</h1>\r\n          <p>{`${floorText.description}`}</p>\r\n          {floorText.tourLink ? (\r\n            <a href={`${floorText.tourLink}`}>Go to virtual tour</a>\r\n          ) : null}\r\n        </div>\r\n        <div\r\n          className=\"btn btn-close\"\r\n          onClick={() => {\r\n            setClickedFloor(null);\r\n            setClickedRoom(null);\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faTimes} className=\"icon\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    clickedFloor: state.setClickedFloor.clickedFloor,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setClickedFloor,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InfoWindow);\r\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport FloorsScene from \"./components/FloorsScene\";\nimport InfoWindow from \"./components/InfoWindow\";\nimport { setWindowWidth } from \"./actions\";\n\n//\"homepage\": \"//https://robertasliekis.github.io/power-plant-3d/\",\n\nfunction App({ setWindowWidth }) {\n  useEffect(() => {\n    function handleResize() {\n      setWindowWidth(window.innerWidth);\n    }\n    window.addEventListener(\"resize\", handleResize);\n\n    handleResize();\n\n    return (_) => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  });\n\n  return (\n    <div className=\"website-wrapper\">\n      <FloorsScene />\n      <InfoWindow />\n    </div>\n  );\n}\n\nconst mapDispatchToProps = {\n  setWindowWidth\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n  clickedFloor: null\r\n};\r\n\r\nconst setClickedFloor = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_CLICKED_FLOOR\":\r\n      return { ...state, clickedFloor: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setClickedFloor;\r\n","const initialState = {\r\n  clickedRoom: null,\r\n  clickCount: 0\r\n};\r\n\r\nconst setClickedRoom = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_CLICKED_ROOM\":\r\n      return { ...state, clickedRoom: action.payload, clickCount: state.clickCount + 1 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setClickedRoom;\r\n","const initialState = {\r\n  windowWidth: 0\r\n};\r\n\r\nconst setWindowWidth = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_WINDOW_WIDTH\":\r\n      return { ...state, windowWidth: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setWindowWidth;\r\n","import { combineReducers } from \"redux\";\r\nimport setClickedFloor from \"./setClickedFloor\";\r\nimport setClickedRoom from \"./setClickedRoom\";\r\nimport setWindowWidth from \"./setWindowWidth\";\r\n\r\nexport default combineReducers({\r\n  setClickedFloor: setClickedFloor,\r\n  setClickedRoom: setClickedRoom,\r\n  setWindowWidth: setWindowWidth\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducers from \"./reducers/allReducers\";\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}