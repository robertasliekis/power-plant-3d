{"version":3,"sources":["actions/index.js","functions/LoadPlantModel.js","functions/LoadFloorModel.js","components/PowerPlantModel.js","components/FloorsScene.js","data/buildingsData.js","components/InfoWindow.js","App.js","serviceWorker.js","reducers/setClickedFloor.js","reducers/setClickedRoom.js","reducers/setWindowWidth.js","reducers/allReducers.js","index.js"],"names":["setClickedFloor","index","type","payload","setClickedRoom","LoadPlantModel","nodes","useLoader","GLTFLoader","activeBuildings","forEach","number","geometry","ground_1","road_1","buildings_1","chimney01_1","chimney02_1","chimney03_1","LoadFloorModel","floorBaseMesh","floor_base_1","floorSideMesh","floor_base_side_1","floorsNumbers","Array","fill","floorsRoomsNumbers","floorsRoomsMeshes","floor","floorIndex","roomsMeshes","room","roomIndex","roomMeshName","push","FloorsModel","windowWidth","clickedFloor","onClickedFloorChange","clickedRoom","onClickedRoomChange","groundMesh","roadMesh","buildingsMesh","chimneyMesh01","chimneyMesh02","chimneyMesh03","buildingRef","useRef","floorRefs","materialRefs","roomRefs","sideRefs","useFrame","setMeshOpacity","opacity","current","roomRef","setMeshPosition","meshRef","indexDifference","floorGap","undefined","floorPosition","position","y","animationSpeed","ref","meshOpacity","useState","hoveredFloor","setHoveredFloor","hoveredOnFloor","mouseInside","map","building","buildingIndex","key","dispose","onPointerOver","e","stopPropagation","onPointerOut","intersections","length","onClick","attach","transparent","color","extend","OrbitControls","softShadows","CameraControls","useThree","camera","domElement","gl","controls","state","update","args","minDistance","maxDistance","minPolarAngle","maxPolarAngle","mapDispatchToProps","connect","setWindowWidth","className","colorManagement","shadowMap","fov","intensity","fallback","PowerPlantModel","buildingsData","name","description","floorText","setFloorText","roomText","setRoomText","useEffect","rooms","style","transform","icon","faTimes","width","handleResize","window","innerWidth","addEventListener","_","removeEventListener","Boolean","location","hostname","match","initialState","action","clickCount","combineReducers","store","createStore","reducers","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e4853fd.chunk.js","sourcesContent":["export const setClickedFloor = (index) => {\r\n  return {\r\n    type: \"SET_CLICKED_FLOOR\",\r\n    payload: index\r\n  };\r\n};\r\n\r\nexport const setClickedRoom = (index) => {\r\n  return {\r\n    type: \"SET_CLICKED_ROOM\",\r\n    payload: index\r\n  };\r\n};\r\n\r\nexport const setWindowWidth = (width) => {\r\n  return {\r\n    type: \"SET_WINDOW_WIDTH\",\r\n    payload: width\r\n  };\r\n};\r\n","import { useLoader } from \"react-three-fiber\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\n\r\nfunction LoadPlantModel() {\r\n  const { nodes } = useLoader(GLTFLoader, \"./models/plant.glb\");\r\n\r\n  const activeBuildings = [];\r\n  const buildingNumbers = [1, 2, 3, 4];\r\n\r\n  buildingNumbers.forEach((number, index) => {\r\n    activeBuildings[index] = nodes[`building${number}_1`].geometry;\r\n  });\r\n\r\n  const groundMesh = nodes.ground_1.geometry;\r\n  const roadMesh = nodes.road_1.geometry;\r\n  const buildingsMesh = nodes.buildings_1.geometry;\r\n  const chimneyMesh01 = nodes.chimney01_1.geometry;\r\n  const chimneyMesh02 = nodes.chimney02_1.geometry;\r\n  const chimneyMesh03 = nodes.chimney03_1.geometry;\r\n\r\n  return [groundMesh, roadMesh, buildingsMesh, chimneyMesh01, chimneyMesh02, chimneyMesh03,activeBuildings];\r\n}\r\n\r\nexport default LoadPlantModel;\r\n","import { useLoader } from \"react-three-fiber\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\n\r\nfunction LoadFloorModel() {\r\n  const { nodes } = useLoader(GLTFLoader, \"./models/floor.glb\");\r\n\r\n  const floorBaseMesh = nodes.floor_base_1.geometry;\r\n  const floorSideMesh = nodes.floor_base_side_1.geometry;\r\n\r\n  const floorsNumbers = Array(5).fill(0);\r\n\r\n  const floorsRoomsNumbers = [6, 4, 5, 4, 5];\r\n\r\n  let floorsRoomsMeshes = [];\r\n\r\n  floorsNumbers.forEach((floor, floorIndex) => {\r\n    let roomsMeshes = Array(floorsRoomsNumbers[floorIndex]).fill(0);\r\n    roomsMeshes.forEach((room, roomIndex) => {\r\n      let roomMeshName = `floor${floorIndex + 1}_room_${roomIndex + 1}_1`;\r\n      roomsMeshes[roomIndex] = nodes[roomMeshName].geometry;\r\n    });\r\n    floorsRoomsMeshes.push(roomsMeshes);\r\n  });\r\n\r\n  return [floorBaseMesh, floorSideMesh, floorsRoomsMeshes];\r\n}\r\n\r\nexport default LoadFloorModel;\r\n","import React, { useRef, useState } from \"react\";\r\nimport { useFrame } from \"react-three-fiber\";\r\n\r\nimport LoadPlantModel from \"../functions/LoadPlantModel\";\r\nimport LoadFloorModel from \"../functions/LoadFloorModel\";\r\n\r\nconst FloorsModel = ({ windowWidth, clickedFloor, clickedRoom, onClickedFloorChange, onClickedRoomChange }) => {\r\n  const [floorBaseMesh, floorSideMesh, floorsRoomsMeshes] = LoadFloorModel();\r\n\r\n  const [groundMesh, roadMesh, buildingsMesh, chimneyMesh01, chimneyMesh02, chimneyMesh03, activeBuildings] = LoadPlantModel();\r\n\r\n  LoadPlantModel();\r\n\r\n  const buildingRef = useRef();\r\n  const floorRefs = useRef([]);\r\n  const materialRefs = useRef([]);\r\n  const roomRefs = useRef([[], [], [], [], []]);\r\n  const sideRefs = useRef([]);\r\n  const floorDistance = 10;\r\n\r\n  useFrame(() => {\r\n    const setMeshOpacity = (opacity, index) => {\r\n      materialRefs.current[index].opacity = opacity;\r\n      sideRefs.current[index].opacity = opacity;\r\n      roomRefs.current[index].forEach((roomRef) => {\r\n        roomRef.opacity = opacity;\r\n      });\r\n    };\r\n\r\n    const setMeshPosition = (meshRef, floorIndex, indexDifference) => {\r\n      let floorGap = 0;\r\n      if (indexDifference !== undefined) {\r\n        floorGap = indexDifference * 30;\r\n      }\r\n      let floorPosition = floorIndex * floorDistance - floorGap;\r\n\r\n      if (meshRef.position.y > floorPosition) {\r\n        if (indexDifference > 0 || indexDifference === undefined) {\r\n          meshRef.position.y -= animationSpeed;\r\n        }\r\n      } else if (meshRef.position.y < floorPosition) {\r\n        if (indexDifference < 0 || indexDifference === undefined) {\r\n          meshRef.position.y += animationSpeed;\r\n        }\r\n      }\r\n    };\r\n\r\n    const animationSpeed = 2;\r\n    // buildingRef.current.rotation.y += 0.001;\r\n    floorRefs.current.forEach((ref, index) => {\r\n      let meshOpacity = 1;\r\n      if (clickedFloor !== null) {\r\n        let indexDifference = clickedFloor - index;\r\n        meshOpacity = 0.2;\r\n        if (clickedFloor !== index) {\r\n          setMeshOpacity(meshOpacity, index);\r\n        }\r\n        setMeshPosition(ref, index, indexDifference);\r\n      } else {\r\n        setMeshOpacity(meshOpacity, index);\r\n        setMeshPosition(ref, index);\r\n      }\r\n    });\r\n  });\r\n\r\n  const [hoveredFloor, setHoveredFloor] = useState(null);\r\n  const [hoveredRoom, setHoveredRoom] = useState(null);\r\n\r\n  const hoveredOnFloor = (index, mouseInside) => {\r\n    // if (clickedFloor === null) {\r\n    //   if (mouseInside) {\r\n    //     setHoveredFloor(index);\r\n    //   } else if (hoveredFloor === index) {\r\n    //     setHoveredFloor(null);\r\n    //   }\r\n    // } else {\r\n    //   setHoveredFloor(null);\r\n    // }\r\n\r\n    if (mouseInside) {\r\n      setHoveredFloor(index);\r\n    } else if (hoveredFloor === index) {\r\n      setHoveredFloor(null);\r\n    }\r\n  };\r\n\r\n  const clickedOnFloor = (index) => {\r\n    onClickedFloorChange(index);\r\n\r\n    // if (clickedFloor === null) {\r\n    //   onClickedFloorChange(index);\r\n    // }\r\n  };\r\n\r\n  const clickedOnRoom = (index, event) => {\r\n    if (clickedFloor !== null) {\r\n      event.stopPropagation();\r\n      onClickedRoomChange(index);\r\n    }\r\n  };\r\n\r\n  const hoveredOnRoom = (floorIndex, roomIndex, mouseInside, event) => {\r\n    if (clickedFloor !== null && clickedFloor === floorIndex) {\r\n      event.stopPropagation();\r\n      if (mouseInside) {\r\n        setHoveredRoom(roomIndex);\r\n      } else if (hoveredRoom === roomIndex) {\r\n        setHoveredRoom(null);\r\n      }\r\n    }\r\n  };\r\n\r\n  const convertDegreesToRadians = (x, y, z) => {\r\n    let degrees = [x, y, z];\r\n    return (degrees = degrees.map((degree) => degree * (Math.PI / 180)));\r\n  };\r\n\r\n  return (\r\n    <group ref={buildingRef} position={[0, -20, 0]}>\r\n      {activeBuildings.map((building, buildingIndex) => (\r\n        <mesh\r\n          geometry={building}\r\n          key={buildingIndex}\r\n          dispose={null}\r\n          onPointerOver={(e) => {\r\n            e.stopPropagation();\r\n            hoveredOnFloor(buildingIndex, true);\r\n          }}\r\n          onPointerOut={(e) => {\r\n            e.intersections.length && hoveredOnFloor(buildingIndex, false);\r\n          }}\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            clickedOnFloor(buildingIndex);\r\n          }}\r\n        >\r\n          <meshStandardMaterial attach=\"material\" transparent={true} color={hoveredFloor === buildingIndex ? \"#00FBFF\" : \"grey\"} />\r\n        </mesh>\r\n      ))}\r\n      <mesh geometry={groundMesh}>\r\n        <meshStandardMaterial attach=\"material\" transparent={true} color={\"white\"} />\r\n      </mesh>\r\n      <mesh geometry={roadMesh}>\r\n        <meshStandardMaterial attach=\"material\" transparent={true} color={\"black\"} />\r\n      </mesh>\r\n      <mesh geometry={buildingsMesh}>\r\n        <meshStandardMaterial attach=\"material\" transparent={true} color={\"grey\"} />\r\n      </mesh>\r\n      <mesh geometry={chimneyMesh01}>\r\n        <meshStandardMaterial attach=\"material\" transparent={true} color={\"grey\"} />\r\n      </mesh>\r\n      <mesh geometry={chimneyMesh02}>\r\n        <meshStandardMaterial attach=\"material\" transparent={true} color={\"grey\"} />\r\n      </mesh>\r\n      <mesh geometry={chimneyMesh03}>\r\n        <meshStandardMaterial attach=\"material\" transparent={true} color={\"grey\"} />\r\n      </mesh>\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default FloorsModel;\r\n","import React, { useRef, Suspense } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setClickedFloor, setClickedRoom } from \"../actions\";\r\nimport { Canvas, useFrame, useThree, extend } from \"react-three-fiber\";\r\nimport { softShadows } from \"drei\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n//import FloorsModel from \"./FloorsModel\";\r\nimport PowerPlantModel from \"./PowerPlantModel\";\r\n\r\nextend({ OrbitControls });\r\nsoftShadows();\r\n\r\nconst CameraControls = ({ windowWidth }) => {\r\n  const {\r\n    camera,\r\n    gl: { domElement }\r\n  } = useThree();\r\n  const controls = useRef();\r\n  useFrame((state) => controls.current.update());\r\n  let minDistance = 50;\r\n  let maxDistance = 250;\r\n  // if (windowWidth < 450) {\r\n  //   minDistance = 250;\r\n  //   maxDistance = 400;\r\n  // }\r\n  return (\r\n    <orbitControls\r\n      ref={controls}\r\n      args={[camera, domElement]}\r\n      minDistance={minDistance}\r\n      maxDistance={maxDistance}\r\n      minPolarAngle={1.2}\r\n      maxPolarAngle={1.2}\r\n    />\r\n  );\r\n};\r\n\r\nfunction FloorsScene({ windowWidth, clickedFloor, clickedRoom, setClickedFloor, setClickedRoom }) {\r\n  const clickedFloorChange = (index) => {\r\n    setClickedFloor(index);\r\n  };\r\n\r\n  const clickedRoomChange = (index) => {\r\n    setClickedRoom(index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"floor-scene-container\">\r\n      <Canvas colorManagement shadowMap camera={{ position: [160, 50, -140], fov: 30 }}>\r\n        <CameraControls windowWidth={windowWidth} />\r\n        <ambientLight intensity={0.6} />\r\n        <pointLight position={[-10, 100, -20]} intensity={0.5} />\r\n        <group>\r\n          <Suspense fallback={null}>\r\n            <PowerPlantModel\r\n              onClickedFloorChange={clickedFloorChange}\r\n              onClickedRoomChange={clickedRoomChange}\r\n              clickedFloor={clickedFloor}\r\n              clickedRoom={clickedRoom}\r\n              windowWidth={windowWidth}\r\n            />\r\n          </Suspense>\r\n        </group>\r\n      </Canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    clickedFloor: state.setClickedFloor.clickedFloor,\r\n    clickedRoom: state.setClickedRoom.clickedRoom,\r\n    windowWidth: state.setWindowWidth.windowWidth\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setClickedFloor,\r\n  setClickedRoom\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FloorsScene);\r\n","const buildingsData = [\r\n  {\r\n    name: \"Building\",\r\n    description:\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil cum illo magnam consequatur quo! Quos voluptates quis consequatur blanditiis placeat nisi, eius dignissimos itaque.\"\r\n  },\r\n  {\r\n    name: \"Building\",\r\n    description:\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil cum illo magnam consequatur quo! Quos voluptates quis.\"\r\n  },\r\n  {\r\n    name: \"Building\",\r\n    description:\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil cum illo magnam consequatur quo! Quos voluptates quis consequatur blanditiis..\"\r\n  },\r\n  {\r\n    name: \"Building\",\r\n    description: \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente omnis natus temporibus fugiat ex nihil cum illo.\"\r\n  }\r\n];\r\n\r\nexport default buildingsData;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setClickedFloor, setClickedRoom } from \"../actions\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport buildingsData from \"../data/buildingsData\";\r\n\r\nfunction InfoWindow({ clickedFloor, clickedRoom, setClickedFloor, setClickedRoom }) {\r\n  const [floorText, setFloorText] = useState(\"\");\r\n  const [roomText, setRoomText] = useState({ name: \"\", description: \"\" });\r\n\r\n  useEffect(() => {\r\n    if (clickedFloor !== null) {\r\n      setFloorText(buildingsData[clickedFloor].description);\r\n    }\r\n    if (clickedRoom !== null) {\r\n      setRoomText(buildingsData[clickedFloor].rooms[clickedRoom]);\r\n    }\r\n  }, [clickedFloor, clickedRoom]);\r\n\r\n  return (\r\n    <div className=\"info-window\">\r\n      <div\r\n        className=\"floor-container container\"\r\n        style={{ transform: clickedFloor !== null ? \"translate(-100%, 0)\" : \"translate(0, 0)\", opacity: clickedFloor !== null ? 1 : 0 }}\r\n      >\r\n        <div className=\"text-container\">\r\n          <h1>{`Building ${clickedFloor + 1}:`}</h1>\r\n          <p>{`${floorText}`}</p>\r\n        </div>\r\n        <div\r\n          className=\"btn btn-close\"\r\n          onClick={() => {\r\n            setClickedFloor(null);\r\n            setClickedRoom(null);\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faTimes} className=\"icon\" />\r\n        </div>\r\n      </div>\r\n      <div\r\n        className=\"room-container container\"\r\n        style={{ transform: clickedRoom !== null ? \"translate(-100%, 0)\" : \"translate(0, 0)\", opacity: clickedRoom !== null ? 1 : 0 }}\r\n      >\r\n        <div className=\"text-container\">\r\n          <h1>{roomText.name}</h1>\r\n          <p>{roomText.description}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    clickedFloor: state.setClickedFloor.clickedFloor,\r\n    clickedRoom: state.setClickedRoom.clickedRoom\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setClickedFloor,\r\n  setClickedRoom\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InfoWindow);\r\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport FloorsScene from \"./components/FloorsScene\";\nimport InfoWindow from \"./components/InfoWindow\";\nimport { setWindowWidth } from \"./actions\";\n\n//\"homepage\": \"//https://robertasliekis.github.io/power-plant-3d/\",\n\nfunction App({ setWindowWidth }) {\n  useEffect(() => {\n    function handleResize() {\n      setWindowWidth(window.innerWidth);\n    }\n    window.addEventListener(\"resize\", handleResize);\n\n    handleResize();\n\n    return (_) => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  });\n\n  return (\n    <div className=\"website-wrapper\">\n      <FloorsScene />\n      <InfoWindow />\n    </div>\n  );\n}\n\nconst mapDispatchToProps = {\n  setWindowWidth\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n  clickedFloor: null\r\n};\r\n\r\nconst setClickedFloor = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_CLICKED_FLOOR\":\r\n      return { ...state, clickedFloor: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setClickedFloor;\r\n","const initialState = {\r\n  clickedRoom: null,\r\n  clickCount: 0\r\n};\r\n\r\nconst setClickedRoom = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_CLICKED_ROOM\":\r\n      return { ...state, clickedRoom: action.payload, clickCount: state.clickCount + 1 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setClickedRoom;\r\n","const initialState = {\r\n  windowWidth: 0\r\n};\r\n\r\nconst setWindowWidth = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_WINDOW_WIDTH\":\r\n      return { ...state, windowWidth: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setWindowWidth;\r\n","import { combineReducers } from \"redux\";\r\nimport setClickedFloor from \"./setClickedFloor\";\r\nimport setClickedRoom from \"./setClickedRoom\";\r\nimport setWindowWidth from \"./setWindowWidth\";\r\n\r\nexport default combineReducers({\r\n  setClickedFloor: setClickedFloor,\r\n  setClickedRoom: setClickedRoom,\r\n  setWindowWidth: setWindowWidth\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducers from \"./reducers/allReducers\";\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}